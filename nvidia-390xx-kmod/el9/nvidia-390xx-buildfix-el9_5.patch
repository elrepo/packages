diff -Naurp kmod-nvidia-390xx-390.157.orig/nvidiapkg/kernel/common/inc/nv-mm.h kmod-nvidia-390xx-390.157.el9_5/nvidiapkg/kernel/common/inc/nv-mm.h
--- kmod-nvidia-390xx-390.157.orig/nvidiapkg/kernel/common/inc/nv-mm.h	2022-10-12 05:30:26.000000000 -0400
+++ kmod-nvidia-390xx-390.157.el9_5/nvidiapkg/kernel/common/inc/nv-mm.h	2025-05-27 20:18:16.631502425 -0400
@@ -282,4 +282,26 @@ static inline struct rw_semaphore *nv_mm
 #endif
 }
 
+#if defined(NV_VM_AREA_STRUCT_HAS_CONST_VM_FLAGS)
+static inline void nv_vm_flags_set(struct vm_area_struct *vma, vm_flags_t flags)
+{
+    vm_flags_set(vma, flags);
+}
+
+static inline void nv_vm_flags_clear(struct vm_area_struct *vma, vm_flags_t flags)
+{
+    vm_flags_clear(vma, flags);
+}
+#else
+static inline void nv_vm_flags_set(struct vm_area_struct *vma, unsigned long flags)
+{
+    vma->vm_flags |= flags;
+}
+
+static inline void nv_vm_flags_clear(struct vm_area_struct *vma, unsigned long flags)
+{
+    vma->vm_flags &= ~flags;
+}
+#endif
+
 #endif // __NV_MM_H__
diff -Naurp kmod-nvidia-390xx-390.157.orig/nvidiapkg/kernel/conftest.sh kmod-nvidia-390xx-390.157.el9_5/nvidiapkg/kernel/conftest.sh
--- kmod-nvidia-390xx-390.157.orig/nvidiapkg/kernel/conftest.sh	2025-05-27 18:43:02.990160315 -0400
+++ kmod-nvidia-390xx-390.157.el9_5/nvidiapkg/kernel/conftest.sh	2025-05-27 21:11:51.516308037 -0400
@@ -4674,7 +4674,47 @@ compile_test() {
             compile_check_conftest "$CODE" "NV_DRM_CONNECTOR_HAS_OVERRIDE_EDID" "" "types"
         ;;
 
-    esac
+        vm_area_struct_has_const_vm_flags)
+            #
+            # Determine if the 'vm_area_struct' structure has
+            # const 'vm_flags'.
+            #
+            # A union of '__vm_flags' and 'const vm_flags' was added 
+            # by commit bc292ab00f6c ("mm: introduce vma->vm_flags
+            # wrapper functions") in mm-stable branch (2023-02-09)
+            # of the akpm/mm maintainer tree.
+            #
+            CODE="
+            #include <linux/mm_types.h>
+            int conftest_vm_area_struct_has_const_vm_flags(void) {
+                return offsetof(struct vm_area_struct, __vm_flags);
+            }"
+
+            compile_check_conftest "$CODE" "NV_VM_AREA_STRUCT_HAS_CONST_VM_FLAGS" "" "types"
+        ;;
+
+        drm_unlocked_ioctl_flag_present)
+            # Determine if DRM_UNLOCKED IOCTL flag is present.
+            #
+            # DRM_UNLOCKED was removed by commit 2798ffcc1d6a ("drm: Remove
+            # locking for legacy ioctls and DRM_UNLOCKED") in Linux
+            # next-20231208.
+            #
+            # DRM_UNLOCKED definition was moved from drmP.h to drm_ioctl.h by
+            # commit 2640981f3600 ("drm: document drm_ioctl.[hc]") in v4.12.
+            CODE="
+            #if defined(NV_DRM_DRM_IOCTL_H_PRESENT)
+            #include <drm/drm_ioctl.h>
+            #endif
+            #if defined(NV_DRM_DRMP_H_PRESENT)
+            #include <drm/drmP.h>
+            #endif
+            int flags = DRM_UNLOCKED;"
+
+            compile_check_conftest "$CODE" "NV_DRM_UNLOCKED_IOCTL_FLAG_PRESENT" "" "types"
+        ;;
+
+   esac
 }
 
 case "$6" in
diff -Naurp kmod-nvidia-390xx-390.157.orig/nvidiapkg/kernel/nvidia/nv-acpi.c kmod-nvidia-390xx-390.157.el9_5/nvidiapkg/kernel/nvidia/nv-acpi.c
--- kmod-nvidia-390xx-390.157.orig/nvidiapkg/kernel/nvidia/nv-acpi.c	2022-10-12 05:30:26.000000000 -0400
+++ kmod-nvidia-390xx-390.157.el9_5/nvidiapkg/kernel/nvidia/nv-acpi.c	2025-05-27 20:11:26.439503303 -0400
@@ -23,10 +23,12 @@ static NV_STATUS   nv_acpi_extract_objec
 
 static int         nv_acpi_add             (struct acpi_device *);
 
-#if !defined(NV_ACPI_DEVICE_OPS_REMOVE_ARGUMENT_COUNT) || (NV_ACPI_DEVICE_OPS_REMOVE_ARGUMENT_COUNT == 2)
-static int         nv_acpi_remove_two_args(struct acpi_device *device, int type);
+#if !defined(NV_ACPI_DEVICE_OPS_REMOVE_ARGUMENT_COUNT)
+static void        nv_acpi_remove(struct acpi_device *device);
+#elif (NV_ACPI_DEVICE_OPS_REMOVE_ARGUMENT_COUNT == 2)
+static int         nv_acpi_remove(struct acpi_device *device, int type);
 #else
-static int         nv_acpi_remove_one_arg(struct acpi_device *device);
+static int         nv_acpi_remove(struct acpi_device *device);
 #endif
 
 static void        nv_acpi_event           (acpi_handle, u32, void *);
@@ -73,11 +75,7 @@ static const struct acpi_driver nv_acpi_
 #endif
     .ops = {
         .add = nv_acpi_add,
-#if !defined(NV_ACPI_DEVICE_OPS_REMOVE_ARGUMENT_COUNT) || (NV_ACPI_DEVICE_OPS_REMOVE_ARGUMENT_COUNT == 2)
-        .remove = nv_acpi_remove_two_args,
-#else
-        .remove = nv_acpi_remove_one_arg,
-#endif
+        .remove = nv_acpi_remove,
 #if defined(NV_ACPI_DEVICE_OPS_HAS_MATCH)
         .match = nv_acpi_match,
 #endif
@@ -331,10 +329,12 @@ static int nv_acpi_add(struct acpi_devic
     return 0;
 }
 
-#if !defined(NV_ACPI_DEVICE_OPS_REMOVE_ARGUMENT_COUNT) || (NV_ACPI_DEVICE_OPS_REMOVE_ARGUMENT_COUNT == 2)
-static int nv_acpi_remove_two_args(struct acpi_device *device, int type)
+#if !defined(NV_ACPI_DEVICE_OPS_REMOVE_ARGUMENT_COUNT)
+static void nv_acpi_remove(struct acpi_device *device)
+#elif (NV_ACPI_DEVICE_OPS_REMOVE_ARGUMENT_COUNT == 2)
+static int nv_acpi_remove(struct acpi_device *device, int type)
 #else
-static int nv_acpi_remove_one_arg(struct acpi_device *device)
+static int nv_acpi_remove(struct acpi_device *device)
 #endif
 {
     /*
@@ -385,7 +385,9 @@ static int nv_acpi_remove_one_arg(struct
         device->driver_data = NULL;
     }
 
+#if defined(NV_ACPI_DEVICE_OPS_REMOVE_ARGUMENT_COUNT)
     return status;
+#endif
 }
 
 static void nv_acpi_event(acpi_handle handle, u32 event_type, void *data)
diff -Naurp kmod-nvidia-390xx-390.157.orig/nvidiapkg/kernel/nvidia/nvidia.Kbuild kmod-nvidia-390xx-390.157.el9_5/nvidiapkg/kernel/nvidia/nvidia.Kbuild
--- kmod-nvidia-390xx-390.157.orig/nvidiapkg/kernel/nvidia/nvidia.Kbuild	2022-10-12 05:29:57.000000000 -0400
+++ kmod-nvidia-390xx-390.157.el9_5/nvidiapkg/kernel/nvidia/nvidia.Kbuild	2025-05-27 20:46:18.600996596 -0400
@@ -209,6 +209,7 @@ NV_CONFTEST_TYPE_COMPILE_TESTS += sysfs_
 NV_CONFTEST_TYPE_COMPILE_TESTS += vmalloc_has_pgprot_t_arg
 NV_CONFTEST_TYPE_COMPILE_TESTS += pci_dev_has_skip_bus_pm
 NV_CONFTEST_TYPE_COMPILE_TESTS += pci_channel_state
+NV_CONFTEST_TYPE_COMPILE_TESTS += vm_area_struct_has_const_vm_flags
 
 NV_CONFTEST_GENERIC_COMPILE_TESTS += dom0_kernel_present
 NV_CONFTEST_GENERIC_COMPILE_TESTS += nvidia_vgpu_kvm_build
diff -Naurp kmod-nvidia-390xx-390.157.orig/nvidiapkg/kernel/nvidia/nv-mmap.c kmod-nvidia-390xx-390.157.el9_5/nvidiapkg/kernel/nvidia/nv-mmap.c
--- kmod-nvidia-390xx-390.157.orig/nvidiapkg/kernel/nvidia/nv-mmap.c	2022-10-12 05:30:26.000000000 -0400
+++ kmod-nvidia-390xx-390.157.el9_5/nvidiapkg/kernel/nvidia/nv-mmap.c	2025-05-27 20:28:31.859001850 -0400
@@ -447,7 +447,7 @@ int nvidia_mmap_helper(
             addr  = mmap_start;
             
             // Needed for the linux kernel for mapping compound pages
-            vma->vm_flags |= VM_MIXEDMAP;
+            nv_vm_flags_set(vma, VM_MIXEDMAP);
 
             for (j = 0; j < pages; j++)
             {
@@ -471,7 +471,7 @@ int nvidia_mmap_helper(
             }
         }
 
-        vma->vm_flags |= VM_IO;
+        nv_vm_flags_set(vma, VM_IO | VM_PFNMAP | VM_DONTEXPAND);
     }
     else
     {
@@ -533,15 +533,15 @@ int nvidia_mmap_helper(
 
         NV_PRINT_AT(NV_DBG_MEMINFO, at);
 
-        vma->vm_flags |= (VM_IO | VM_LOCKED | VM_RESERVED);
-        vma->vm_flags |= (VM_DONTEXPAND | VM_DONTDUMP);
+        nv_vm_flags_set(vma, VM_IO | VM_LOCKED | VM_RESERVED);
+        nv_vm_flags_set(vma, VM_DONTEXPAND | VM_DONTDUMP);
     }
 
     if ((prot & NV_PROTECT_WRITEABLE) == 0)
     {
         vma->vm_page_prot = NV_PGPROT_READ_ONLY(vma->vm_page_prot);
-        vma->vm_flags &= ~VM_WRITE;
-        vma->vm_flags &= ~VM_MAYWRITE;
+        nv_vm_flags_clear(vma, VM_WRITE);
+        nv_vm_flags_clear(vma, VM_MAYWRITE);
     }
 
     vma->vm_ops = &nv_vm_ops;
diff -Naurp kmod-nvidia-390xx-390.157.orig/nvidiapkg/kernel/nvidia-drm/nvidia-drm-drv.c kmod-nvidia-390xx-390.157.el9_5/nvidiapkg/kernel/nvidia-drm/nvidia-drm-drv.c
--- kmod-nvidia-390xx-390.157.orig/nvidiapkg/kernel/nvidia-drm/nvidia-drm-drv.c	2025-05-27 18:43:02.991160302 -0400
+++ kmod-nvidia-390xx-390.157.el9_5/nvidiapkg/kernel/nvidia-drm/nvidia-drm-drv.c	2025-05-27 21:16:02.501248155 -0400
@@ -654,6 +654,19 @@ static const struct file_operations nv_d
     .llseek         = noop_llseek,
 };
 
+/*
+ * DRM_UNLOCKED was removed with linux-next commit 2798ffcc1d6a ("drm: Remove
+ * locking for legacy ioctls and DRM_UNLOCKED"), but it was previously made
+ * implicit for all non-legacy DRM driver IOCTLs since Linux v4.10 commit
+ * fa5386459f06 "drm: Used DRM_LEGACY for all legacy functions" (Linux v4.4
+ * commit ea487835e887 "drm: Enforce unlocked ioctl operation for kms driver
+ * ioctls" previously did it only for drivers that set the DRM_MODESET flag), so
+ * it was effectively a no-op anyway.
+ */
+#if !defined(NV_DRM_UNLOCKED_IOCTL_FLAG_PRESENT)
+#define DRM_UNLOCKED 0
+#endif
+
 static const struct drm_ioctl_desc nv_drm_ioctls[] = {
 #if defined(NV_DRM_ATOMIC_MODESET_AVAILABLE)
     DRM_IOCTL_DEF_DRV(NVIDIA_GEM_IMPORT_NVKMS_MEMORY,
diff -Naurp kmod-nvidia-390xx-390.157.orig/nvidiapkg/kernel/nvidia-drm/nvidia-drm.Kbuild kmod-nvidia-390xx-390.157.el9_5/nvidiapkg/kernel/nvidia-drm/nvidia-drm.Kbuild
--- kmod-nvidia-390xx-390.157.orig/nvidiapkg/kernel/nvidia-drm/nvidia-drm.Kbuild	2022-06-21 20:31:27.000000000 -0400
+++ kmod-nvidia-390xx-390.157.el9_5/nvidiapkg/kernel/nvidia-drm/nvidia-drm.Kbuild	2025-05-27 21:13:00.610465682 -0400
@@ -106,3 +106,5 @@ NV_CONFTEST_TYPE_COMPILE_TESTS += drm_de
 NV_CONFTEST_TYPE_COMPILE_TESTS += dma_resv_add_fence
 NV_CONFTEST_TYPE_COMPILE_TESTS += dma_resv_reserve_fences
 NV_CONFTEST_TYPE_COMPILE_TESTS += reservation_object_reserve_shared_has_num_fences_arg
+NV_CONFTEST_TYPE_COMPILE_TESTS += vm_area_struct_has_const_vm_flags
+NV_CONFTEST_TYPE_COMPILE_TESTS += drm_unlocked_ioctl_flag_present
diff -Naurp kmod-nvidia-390xx-390.157.orig/nvidiapkg/kernel/nvidia-uvm/nvidia-uvm.Kbuild kmod-nvidia-390xx-390.157.el9_5/nvidiapkg/kernel/nvidia-uvm/nvidia-uvm.Kbuild
--- kmod-nvidia-390xx-390.157.orig/nvidiapkg/kernel/nvidia-uvm/nvidia-uvm.Kbuild	2022-10-12 05:29:57.000000000 -0400
+++ kmod-nvidia-390xx-390.157.el9_5/nvidiapkg/kernel/nvidia-uvm/nvidia-uvm.Kbuild	2025-05-27 20:49:50.428414094 -0400
@@ -133,6 +133,7 @@ NV_CONFTEST_TYPE_COMPILE_TESTS += vm_fau
 NV_CONFTEST_TYPE_COMPILE_TESTS += proc_ops
 NV_CONFTEST_TYPE_COMPILE_TESTS += timeval
 NV_CONFTEST_TYPE_COMPILE_TESTS += mm_has_mmap_lock
+NV_CONFTEST_TYPE_COMPILE_TESTS += vm_area_struct_has_const_vm_flags
 NV_CONFTEST_TYPE_COMPILE_TESTS += pnv_npu2_init_context
 NV_CONFTEST_TYPE_COMPILE_TESTS += kmem_cache_has_kobj_remove_work
 NV_CONFTEST_TYPE_COMPILE_TESTS += sysfs_slab_unlink
diff -Naurp kmod-nvidia-390xx-390.157.orig/nvidiapkg/kernel/nvidia-uvm/uvm8.c kmod-nvidia-390xx-390.157.el9_5/nvidiapkg/kernel/nvidia-uvm/uvm8.c
--- kmod-nvidia-390xx-390.157.orig/nvidiapkg/kernel/nvidia-uvm/uvm8.c	2022-10-12 05:30:28.000000000 -0400
+++ kmod-nvidia-390xx-390.157.el9_5/nvidiapkg/kernel/nvidia-uvm/uvm8.c	2025-05-27 20:55:00.355635610 -0400
@@ -658,7 +658,7 @@ static int uvm_mmap(struct file *filp, s
     // Using VM_DONTCOPY would be nice, but madvise(MADV_DOFORK) can reset that
     // so we have to handle vm_open on fork anyway. We could disable MADV_DOFORK
     // with VM_IO, but that causes other mapping issues.
-    vma->vm_flags |= VM_MIXEDMAP | VM_DONTEXPAND;
+    nv_vm_flags_set(vma, VM_MIXEDMAP | VM_DONTEXPAND);
 
     vma->vm_ops = &uvm_vm_ops_managed;
 
