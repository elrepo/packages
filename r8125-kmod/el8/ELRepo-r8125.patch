diff -Naurp r8125-9.016.01.orig/src/r8125.h r8125-9.016.01/src/r8125.h
--- r8125-9.016.01.orig/src/r8125.h	2025-07-28 10:08:00.000000000 -0400
+++ r8125-9.016.01/src/r8125.h	2025-09-21 12:13:31.514380236 -0400
@@ -175,7 +175,7 @@ static inline void netdev_tx_completed_q
 static inline void netdev_tx_reset_queue(struct netdev_queue *q) {}
 #endif
 
-#if LINUX_VERSION_CODE < KERNEL_VERSION(5,8,0)
+#if LINUX_VERSION_CODE < KERNEL_VERSION(5,8,0) && RHEL_MAJOR < 8
 static inline void fsleep(unsigned long usecs)
 {
         if (usecs <= 10)
@@ -204,7 +204,7 @@ static inline void fsleep(unsigned long
 typedef int netdev_tx_t;
 #endif
 
-#if LINUX_VERSION_CODE < KERNEL_VERSION(5,12,0)
+#if LINUX_VERSION_CODE < KERNEL_VERSION(5,12,0) && RHEL_MAJOR != 8
 #if LINUX_VERSION_CODE < KERNEL_VERSION(4,1,9)
 static inline bool page_is_pfmemalloc(struct page *page)
 {
@@ -895,7 +895,7 @@ typedef int *napi_budget;
 typedef struct napi_struct *napi_ptr;
 typedef int napi_budget;
 
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(6,1,0)
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6,1,0) || RHEL_MAJOR == 8
 #define RTL_NAPI_CONFIG(ndev, priv, function, weight)   netif_napi_add_weight(ndev, &priv->napi, function, weight)
 #else
 #define RTL_NAPI_CONFIG(ndev, priv, function, weight)   netif_napi_add(ndev, &priv->napi, function, weight)
diff -Naurp r8125-9.016.01.orig/src/r8125_n.c r8125-9.016.01/src/r8125_n.c
--- r8125-9.016.01.orig/src/r8125_n.c	2025-07-28 10:08:00.000000000 -0400
+++ r8125-9.016.01/src/r8125_n.c	2025-09-21 12:13:31.525379976 -0400
@@ -58,7 +58,7 @@
 #include <linux/completion.h>
 
 #if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,26)
-#if LINUX_VERSION_CODE < KERNEL_VERSION(5,4,0)
+#if LINUX_VERSION_CODE < KERNEL_VERSION(5,4,0) && RHEL_MAJOR != 8
 #include <linux/pci-aspm.h>
 #endif
 #endif
@@ -389,7 +389,7 @@ static irqreturn_t rtl8125_interrupt_msi
 static irqreturn_t rtl8125_interrupt_msix(int irq, void *dev_instance);
 #endif
 static void rtl8125_set_rx_mode(struct net_device *dev);
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(5,6,0)
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5,6,0) || RHEL_MAJOR == 8
 static void rtl8125_tx_timeout(struct net_device *dev, unsigned int txqueue);
 #else
 static void rtl8125_tx_timeout(struct net_device *dev);
@@ -6755,7 +6755,7 @@ rtl8125_set_ring_size(struct rtl8125_pri
 }
 
 #if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,0)
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(5,17,0)
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5,17,0) || RHEL_MAJOR == 8
 static void rtl8125_get_ringparam(struct net_device *dev,
                                   struct ethtool_ringparam *ring,
                                   struct kernel_ethtool_ringparam *kernel_ring,
@@ -6773,7 +6773,7 @@ static void rtl8125_get_ringparam(struct
         ring->tx_pending = tp->tx_ring[0].num_tx_desc;
 }
 
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(5,17,0)
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5,17,0) || RHEL_MAJOR == 8
 static int rtl8125_set_ringparam(struct net_device *dev,
                                  struct ethtool_ringparam *ring,
                                  struct kernel_ethtool_ringparam *kernel_ring,
@@ -16465,6 +16465,7 @@ err_out:
         goto out;
 }
 
+#ifndef ENABLE_USE_FIRMWARE_FILE
 static bool
 rtl8125_test_phy_ocp_v4(struct rtl8125_private *tp)
 {
@@ -16614,6 +16615,7 @@ exit:
 
         return restore;
 }
+#endif
 
 static bool
 rtl8125_test_phy_ocp(struct rtl8125_private *tp)
@@ -16626,6 +16628,7 @@ rtl8125_test_phy_ocp(struct rtl8125_priv
         if (tp->TestPhyOcpReg == FALSE)
                 goto unlock;
 
+#ifndef ENABLE_USE_FIRMWARE_FILE
         switch (tp->HwSuppEsdVer) {
         case 4:
                 reset = rtl8125_test_phy_ocp_v4(tp);
@@ -16636,6 +16639,7 @@ rtl8125_test_phy_ocp(struct rtl8125_priv
         default:
                 goto unlock;
         }
+#endif
 
 unlock:
         r8125_spin_unlock(&tp->phy_lock, flags);
@@ -17494,7 +17498,7 @@ rtl8125_init_one(struct pci_dev *pdev,
                         dev->features |= NETIF_F_TSO6;
                         break;
                 };
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(5,19,0)
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5,19,0) || RHEL_MAJOR == 8
                 netif_set_tso_max_size(dev, LSO_64K);
                 netif_set_tso_max_segs(dev, NIC_MAX_PHYS_BUF_COUNT_LSO2);
 #else //LINUX_VERSION_CODE >= KERNEL_VERSION(5,19,0)
@@ -19365,7 +19369,7 @@ out_unlock:
         rtnl_unlock();
 }
 
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(5,6,0)
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5,6,0) || RHEL_MAJOR == 8
 static void
 rtl8125_tx_timeout(struct net_device *dev, unsigned int txqueue)
 #else
diff -Naurp r8125-9.016.01.orig/src/r8125_ptp.c r8125-9.016.01/src/r8125_ptp.c
--- r8125-9.016.01.orig/src/r8125_ptp.c	2025-07-28 10:08:00.000000000 -0400
+++ r8125-9.016.01/src/r8125_ptp.c	2025-09-21 12:13:31.526379953 -0400
@@ -407,7 +407,7 @@ static int _rtl8125_phy_phc_adjfreq(stru
         return 0;
 }
 
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(6,2,0)
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6,2,0) || RHEL_MAJOR == 8
 static int rtl8125_mac_ptp_adjfine(struct ptp_clock_info *ptp, long scaled_ppm)
 {
         s32 ppb = scaled_ppm_to_ppb(scaled_ppm);
@@ -472,7 +472,7 @@ static int rtl8125_mac_phc_gettime(struc
 }
 #endif /* LINUX_VERSION_CODE >= KERNEL_VERSION(5,0,0) */
 
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(6,2,0)
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6,2,0) || RHEL_MAJOR == 8
 static int rtl8125_phy_ptp_adjfine(struct ptp_clock_info *ptp, long scaled_ppm)
 {
         s32 ppb = scaled_ppm_to_ppb(scaled_ppm);
@@ -691,7 +691,7 @@ static const struct ptp_clock_info rtl81
         .n_per_out  = 0,
         .n_pins     = 0,
         .pps        = 1,
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(6,2,0)
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6,2,0) || RHEL_MAJOR == 8
         .adjfine   = rtl8125_mac_ptp_adjfine,
 #else
         .adjfreq    = rtl8125_mac_phc_adjfreq,
@@ -713,7 +713,7 @@ static const struct ptp_clock_info rtl81
         .n_per_out  = 0,
         .n_pins     = 0,
         .pps        = 1,
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(6,2,0)
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6,2,0) || RHEL_MAJOR == 8
         .adjfine   = rtl8125_phy_ptp_adjfine,
 #else
         .adjfreq    = rtl8125_phy_phc_adjfreq,
@@ -1403,7 +1403,7 @@ static void rtl8125_rx_phy_ptp_pktstamp(
         return;
 }
 
-#if LINUX_VERSION_CODE < KERNEL_VERSION(5,10,0)
+#if LINUX_VERSION_CODE < KERNEL_VERSION(5,10,0) && RHEL_MAJOR != 8
 static struct ptp_header *ptp_parse_header(struct sk_buff *skb, unsigned int type)
 {
         u8 *ptr = skb_mac_header(skb);
diff -Naurp r8125-9.016.01.orig/src/r8125_ptp.h r8125-9.016.01/src/r8125_ptp.h
--- r8125-9.016.01.orig/src/r8125_ptp.h	2025-07-28 10:08:00.000000000 -0400
+++ r8125-9.016.01/src/r8125_ptp.h	2025-09-21 12:13:31.527379929 -0400
@@ -48,7 +48,7 @@
 #define PTP_MSGTYPE_PDELAY_RESP 0x3
 #endif /* LINUX_VERSION_CODE < KERNEL_VERSION(5,11,0) */
 
-#if LINUX_VERSION_CODE < KERNEL_VERSION(5,10,0)
+#if LINUX_VERSION_CODE < KERNEL_VERSION(5,10,0) && RHEL_MAJOR != 8
 struct clock_identity {
         u8 id[8];
 } __packed;
